version: 2.1

orbs:
  go: circleci/go@1.7.3
  aws-ecr: circleci/aws-ecr@8.2.1
  kubernetes: circleci/kubernetes@1.3.1
  helm: circleci/helm@2.0.1

jobs:
  build_lint_test:
    machine:
      image: ubuntu-2204:2024.01.1
    resource_class: large
    steps:
      - go/install:
          version: "1.21.4"
      - checkout
      - run:
          name: Print Go environment
          command: "go env"
      - go/load-cache:
          key: go-mod-v6-{{ checksum "go.sum" }}
      - go/mod-download
      - go/save-cache:
          key: go-mod-v6-{{ checksum "go.sum" }}
          path: "/home/circleci/.go_workspace/pkg/mod"
      - run:
          name: Build cli app
          command: make build
      - run:
          name: Lint
          command: |
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.55.2
            ./bin/golangci-lint run --timeout 5m0s
      - run:
          name: Run tests
          command: |
            make test
      - run:
          name: Run integration tests
          command: |
            make test-e2e

  build_docker:
    machine:
      image: ubuntu-2204:2024.01.1
      resource_class: large
    steps:
      - checkout
      - aws-ecr/build-image:
          push-image: false
          dockerfile: Dockerfile
          path: ./
          build-path: ./
          tag: "$CIRCLE_SHA1,$CIRCLE_TAG"
          repo: "$CIRCLE_PROJECT_REPONAME"
      - run:
          name: Save Docker image to export it to workspace
          command: |
            docker save $(docker image ls --format '{{.Repository}}:{{.Tag}}') > /tmp/covenant-signer.tar
      - persist_to_workspace:
          root: /tmp
          paths:
            - covenant-signer.tar

  push_docker:
    machine:
      image: ubuntu-2204:2024.01.1
      resource_class: large
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Load Docker image from workspace
          command: |
            docker load -i /tmp/covenant-signer.tar
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: "$AWS_REGION"
      - aws-ecr/push-image:
          registry-id: AWS_ECR_REGISTRY_ID
          region: "$AWS_REGION"
          repo: "$CIRCLE_PROJECT_REPONAME"
          tag: "$CIRCLE_SHA1,$CIRCLE_TAG"

  deploy_staging:
    machine:
      image: ubuntu-2204:2024.01.1
      resource_class: large
    steps:
      - checkout
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: "$AWS_REGION"
      - kubernetes/install-kubeconfig:
          kubeconfig: TESTNET_KUBECONFIG
      - helm/install-helm-client
      - run:
          name: Fetch and replace config placeholders from CircleCi env vars
          command: |
            HELM_VALUES=/home/circleci/project/.circleci/values-staging.yaml
            sed -i "s/BTC_USER/$BTC_USER/g" $HELM_VALUES
            sed -i "s/BTC_PASSWORD/$BTC_PASSWORD/g" $HELM_VALUES
            sed -i "s/COVENANT_SIGNER_STAGING_FQDN/$COVENANT_SIGNER_STAGING_FQDN/g" $HELM_VALUES
      - run:
          name: Perform a dry run of the new releases
          command: |
            HELM_VALUES=/home/circleci/project/.circleci/values-staging.yaml
            for idx in `seq 0 2`
            do
              sed -i "s/IDX/$idx/g" $HELM_VALUES
              helm upgrade --install --debug --dry-run \
                -n $DEPLOY_STAGING_NAMESPACE \
                --values $HELM_VALUES \
                --version $HELM_CHART_VERSION \
                --set deployment.version=$CIRCLE_SHA1 \
                covenant-signer$idx $HELM_CHART_REPO
            done
      - run:
          name: Release new service version in an atomic way
          command: |
            HELM_VALUES=/home/circleci/project/.circleci/values-staging.yaml
            for idx in `seq 0 2`
            do
              sed -i "s/IDX/$idx/g" $HELM_VALUES
              helm upgrade --install --debug --atomic --wait \
                -n $DEPLOY_STAGING_NAMESPACE --create-namespace \
                --values $HELM_VALUES \
                --version $HELM_CHART_VERSION \
                --set deployment.version=$CIRCLE_SHA1 \
                covenant-signer$idx $HELM_CHART_REPO
            done

  deploy_testnet:
    machine:
      image: ubuntu-2204:2024.01.1
      resource_class: large
    steps:
      - checkout
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: "$AWS_REGION"
      - kubernetes/install-kubeconfig:
          kubeconfig: TESTNET_KUBECONFIG
      - helm/install-helm-client
      - run:
          name: Fetch and replace config placeholders from CircleCi env vars
          command: |
            HELM_VALUES=/home/circleci/project/.circleci/values-testnet.yaml
            sed -i "s/BTC_USER/$BTC_USER/g" $HELM_VALUES
            sed -i "s/BTC_PASSWORD/$BTC_PASSWORD/g" $HELM_VALUES
            sed -i "s/COVENANT_SIGNER_FQDN/$COVENANT_SIGNER_FQDN/g" $HELM_VALUES
      - run:
          name: Perform a dry run of the new release
          command: |
            HELM_VALUES=/home/circleci/project/.circleci/values-testnet.yaml
            for idx in `seq 0 2`
            do
              sed -i "s/IDX/$idx/g" $HELM_VALUES
              helm upgrade --install --debug --dry-run \
                -n $DEPLOY_TESTNET_NAMESPACE \
                --values $HELM_VALUES \
                --version $HELM_CHART_VERSION \
                --set deployment.version=$CIRCLE_SHA1 \
                covenant-signer$idx $HELM_CHART_REPO
            done
      - run:
          name: Release new service version in an atomic way
          command: |
            HELM_VALUES=/home/circleci/project/.circleci/values-testnet.yaml
            for idx in `seq 0 2`
            do
              sed -i "s/IDX/$idx/g" $HELM_VALUES
              helm upgrade --install --debug --atomic --wait \
                -n $DEPLOY_TESTNET_NAMESPACE --create-namespace \
                --values $HELM_VALUES \
                --version $HELM_CHART_VERSION \
                --set deployment.version=$CIRCLE_SHA1 \
                covenant-signer$idx $HELM_CHART_REPO
            done

  rollback_testnet:
    machine:
      image: ubuntu-2204:2024.01.1
      resource_class: large
    steps:
      - checkout
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: "$AWS_REGION"
      - kubernetes/install-kubeconfig:
          kubeconfig: TESTNET_KUBECONFIG
      - helm/install-helm-client
      - run:
          name: Rollback Helm Chart to previous release
          command: |
            helm rollback --cleanup-on-fail --force --recreate-pods --wait \
              --debug -n $DEPLOY_TESTNET_NAMESPACE covenant-signer

workflows:
  CI:
    jobs:
      - build_lint_test
      - build_docker:
          filters:
            tags:
              only: /.*/
      - push_docker:
          requires:
            - build_docker
              #filters:
              #  tags:
              #    only: /.*/
              #  branches:
              #    only:
              #      - main
              #      - dev
      - deploy_staging:
          requires:
            - push_docker
              #- build_lint_test
              #filters:
              #  branches:
              #    only:
              #      - main
              #      - dev
      - require_approval_deploy:
          type: approval
          requires:
            - deploy_staging
              #filters:
              #  branches:
              #    only:
              #      - main
              #      - dev
      - deploy_testnet:
          requires:
            - require_approval_deploy
              #filters:
              #  branches:
              #    only:
              #      - main
              #      - dev
      - require_approval_rollback:
          type: approval
          requires:
            - deploy_testnet
              #filters:
              #  branches:
              #    only:
              #      - main
              #      - dev
      - rollback_testnet:
          requires:
            - require_approval_rollback
              #filters:
              #  branches:
              #    only:
              #      - main
              #      - dev
